package Models;

import Beans.Question;
import Beans.QuizDetails;
import Beans.QuizResults;
import Util.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.UUID;

import java.sql.CallableStatement;

public class Quiz {
    //Cluster cluster;

    /**
     * @ param the ID of the Quiz selected
     * @ return the details of the Quiz
     */
    public QuizDetails getQuiz(int quizID) {
        QuizDetails quizDetails = new QuizDetails();

        Connection con;
        Statement statement = null;
        ResultSet quizRS = null;
        ResultSet questionRS = null;
        ResultSet answerRS = null;

        String title = "";

        try {
            con = DBConnection.createConnection(); //establishing connection
            statement = con.createStatement();
            quizRS = statement.executeQuery("select Available, Title, CreationDate from quiz where ID=" + quizID);

            while (quizRS.next()) {
                title = quizRS.getString("Title");
                quizDetails.setTitle(title);
                quizDetails.setAvailability(quizRS.getBoolean("Available"));
                quizDetails.setDate(quizRS.getDate("CreationDate").toString());
            }

            statement = con.createStatement();
            questionRS = statement.executeQuery("select ID,QuestionText, ExplanationText, Valid, QuestionNumber from question where QuizID = " + quizID);

            ArrayList<Question> questions = new ArrayList<>();

            while (questionRS.next()) // Until next row is present otherwise it return false
            {
                Question q = new Question();

                q.setQuestionText(questionRS.getString("QuestionText"));
                q.setExplanation(questionRS.getString("ExplanationText"));

                int questionNumber = questionRS.getInt("QuestionNumber");
                statement = con.createStatement();
                answerRS = statement.executeQuery("select AnswerText, Correct from answer where QuestionID = " + questionRS.getInt("ID"));

                int c = 0;
                //String[] answers = new String[4];
                ArrayList<String> answers = new ArrayList<>();
                ArrayList<Integer> correctAnswers = new ArrayList<>();

                while (answerRS.next()) {
                    boolean correct = answerRS.getBoolean("Correct");
                    if (correct) {
                        correctAnswers.add(c);
                    }
                    answers.add(answerRS.getString("AnswerText"));
                    c++;
                }
                q.setCorrectAnswers(correctAnswers);
                q.setAnswers(answers);
                questions.add(q);
            }

            quizDetails.setQuestions(questions);
            con.close();
            return quizDetails;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * @ param the initial details of a Quiz
     * @ return the ID generated by the server for the Quiz just created
     */
    public int RegisterQuiz(String title, String moduleID, int available, LocalDate creationDate) {
        Connection con = null;
        ResultSet rs = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection
            Statement statement = con.createStatement();
            PreparedStatement st;

            st = con.prepareStatement("Insert into quiz (Available, Title, CreationDate, moduleID) values (?,?,?,?)");
            //set each value of the query with the value of a variable
            st.setInt(1, available);
            st.setString(2, title);
            java.sql.Date dat = java.sql.Date.valueOf(creationDate);
            st.setDate(3, dat);
            st.setString(4, moduleID);
            st.executeUpdate();
            st.clearParameters();

            rs = statement.executeQuery("Select ID from quiz where Title = '" + title + "' AND moduleID = " + moduleID + " AND CreationDate = '" + creationDate + "'");

            while (rs.next()) // Until next row is present otherwise it returns false
            {
                //get quiz id value
                id = rs.getInt("ID");
                System.out.println("Current Quiz id: " + id);
            }
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return id;
    }

    /**
     * @ param the details of a Question
     * @ return the ID generated by the server for the Question just created
     */
    public int SubmitQuestion(String questionText, String explanationText, int quizID, int questionNumber) {
        Connection con = null;
        ResultSet rs = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection
            Statement statement = con.createStatement();
            PreparedStatement st;

            st = con.prepareStatement("{call insertQuestion (?,?,?,?)}");
            //set each value of the stored procedure with the value of a variable
            st.setString(1, questionText);
            st.setString(2, explanationText);
            st.setInt(3, quizID);
            st.setInt(4, questionNumber);
            st.executeUpdate();
            st.clearParameters();

            rs = statement.executeQuery("Select ID from question where QuizID = " + quizID + " AND QuestionNumber = " + questionNumber);

            while (rs.next()) // Until next row is present otherwise it returns false
            {
                //get question id value
                id = rs.getInt("ID");
                System.out.println("Current Question id: " + id);
            }
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return id;
    }

    /**
     * @ param the details of an Answer
     * @ return the ID generated by the server for the Answer just created
     */
    public int SubmitAnswer(String answerText, int correct, int questionNumber) {
        Connection con = null;
        int id = 0;

        try {
            con = DBConnection.createConnection(); //establishing connection 
            PreparedStatement st;

            st = con.prepareStatement("Insert into answer (AnswerText, Correct, QuestionID) values (?,?,?)");
            //set each value of the query with the value of a variable
            st.setString(1, answerText);
            st.setInt(2, correct);
            st.setInt(3, questionNumber);
            st.executeUpdate();
            st.clearParameters();

            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return -1;
        }
        return 1;
    }
    
    public QuizResults getQuizResults(int quizID) {

        QuizResults quizResults = new QuizResults();

        ArrayList<Integer> scores = new ArrayList<>();
        ArrayList<String> surnames = new ArrayList<>();
        ArrayList<String> firstnames = new ArrayList<>();
        ArrayList<String> matricNum = new ArrayList<>();
        ArrayList<Integer> attempts = new ArrayList<>();
        ArrayList<String> dates = new ArrayList<>();

        Connection con;
        Statement statement = null;
        ResultSet quizRS = null;
        ResultSet userRS = null;
        ResultSet stats = null;

        try {
            con = DBConnection.createConnection(); //establishing connection
            statement = con.createStatement();
            quizRS = statement.executeQuery("select Attempts, userID, Score, date from completed_quiz where quizID=" + quizID);

            while (quizRS.next()) {
                scores.add(quizRS.getInt("Score"));
                attempts.add(quizRS.getInt("Attempts"));
                matricNum.add(quizRS.getString("userID"));
                dates.add(quizRS.getString("date"));

                statement = con.createStatement();
                userRS = statement.executeQuery("select First_Name, Last_Name from user where ID = " + quizRS.getString("userID"));

                //there will be one user anyway, but while loop is needed for it to work
                while (userRS.next()) {
                    surnames.add(userRS.getString("First_Name"));
                    firstnames.add(userRS.getString("Last_Name"));
                }
            }
            statement = con.createStatement();
            stats = statement.executeQuery("select avg(Score) as scoreAvg, max(Score) as scoreMax, min(Score) as scoreMin from completed_quiz where quizID=" + quizID);

            while (stats.next()) {
                quizResults.setAverage(stats.getDouble("scoreAvg"));
                quizResults.setMaxi(stats.getInt("scoreMin"));
                quizResults.setMini(stats.getInt("scoreMax"));
            }

            quizResults.setAttempts(attempts);
            quizResults.setFirstnames(firstnames);
            quizResults.setMatricNum(matricNum);
            quizResults.setSurnames(surnames);
            quizResults.setScores(scores);
            quizResults.setDates(dates);

            con.close();
            return quizResults;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }

    }

    public QuizResults getRelevantQuizResults(int quizID) {
        QuizResults quizResults = new QuizResults();

        ArrayList<Integer> scores = new ArrayList<>();
        ArrayList<String> surnames = new ArrayList<>();
        ArrayList<String> firstnames = new ArrayList<>();
        ArrayList<String> matricNum = new ArrayList<>();
        ArrayList<Integer> attempts = new ArrayList<>();
        ArrayList<String> dates = new ArrayList<>();

        Connection con;
        Statement statement = null;
        ResultSet quizRS = null;
        ResultSet userRS = null;
        ResultSet stats = null;
        ResultSet modules = null;

        try {
            con = DBConnection.createConnection(); //establishing connection
            statement = con.createStatement();
            modules = statement.executeQuery("select moduleID from quiz where ID=" + quizID);
            int modID = 0;

            while (modules.next()) {
                modID = modules.getInt("moduleID");
            }

            statement = con.createStatement();
            //quizRS = statement.executeQuery("select Attempts, userID, Score, date from completed_quiz where quizID=1 AND userID IN (Select studentID from student_modules where moduleID=1)");
            //quizRS = statement.executeQuery("select Attempts, userID, Score, date from completed_quiz where quizID=" + quizID);
            String sql = "select Attempts, userID, Score, date from completed_quiz where quizID=? AND userID IN (Select studentID from student_modules where moduleID=?)";
            PreparedStatement pstmt = con.prepareStatement(sql);
            pstmt.setInt(2,1);
            pstmt.setString(1,"1");
            quizRS = pstmt.executeQuery();
            
            while (quizRS.next()) {
                scores.add(quizRS.getInt("Score"));
                attempts.add(quizRS.getInt("Attempts"));
                matricNum.add(quizRS.getString("userID"));
                dates.add(quizRS.getString("date"));

                statement = con.createStatement();
                userRS = statement.executeQuery("select First_Name, Last_Name from user where ID = " + quizRS.getString("userID"));

                //there will be one user anyway, but while loop is needed for it to work
                while (userRS.next()) {
                    firstnames.add(userRS.getString("First_Name"));
                    surnames.add(userRS.getString("Last_Name"));
                }
            }
            statement = con.createStatement();
            stats = statement.executeQuery("select avg(Score) as scoreAvg, max(Score) as scoreMax, min(Score) as scoreMin from completed_quiz where quizID=" + quizID);

            while (stats.next()) {
                quizResults.setAverage(stats.getDouble("scoreAvg"));
                quizResults.setMaxi(stats.getInt("scoreMin"));
                quizResults.setMini(stats.getInt("scoreMax"));
            }

            quizResults.setAttempts(attempts);
            quizResults.setFirstnames(firstnames);
            quizResults.setMatricNum(matricNum);
            quizResults.setSurnames(surnames);
            quizResults.setScores(scores);
            quizResults.setDates(dates);

            con.close();
            return quizResults;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
            //return new QuizResults() ;
        }
    }
    
    public int EditQuiz(int quizID) {
        QuizDetails qDetails = new QuizDetails();
        Connection con = null;
        int id = 0;

        //Statement statement = null; 
        //ResultSet QuizRS = null;
        //ResultSet QuestionRS = null;
        //ResultSet AnswerRS = null;
        boolean available = false;
        String title = null;
        String questiontext = null;
        String explanationtext = null;
        String answertext = null;
        boolean correct = false;

        try {
            //establishing connection to db
            con = DBConnection.createConnection();
            PreparedStatement statement1 = con.prepareStatement("UPDATE quiz SET Available = ?, Title = ?");
            PreparedStatement statement2 = con.prepareStatement("UPDATE question SET questiontext = ?, explanationtext = ?");
            PreparedStatement statement3 = con.prepareStatement("UPDATE answer SET answertext = ?, correct = ?");

            //QuizRS = statement.executeQuery("UPDATE quiz SET Available = ?, Title = ?");
            //QuestionRS = statement.executeQuery("UPDATE question SET questiontext = ?, explanationtext = ?");
            //AnswerRS = statement.executeQuery("UPDATE answer SET answertext = ?, correct = ?");
            statement1.setBoolean(1, available);
            statement1.setString(2, title);
            statement2.setString(1, questiontext);
            statement2.setString(2, explanationtext);
            statement3.setString(1, answertext);
            statement3.setBoolean(2, correct);

            statement1.executeUpdate();
            statement2.executeUpdate();
            statement3.executeUpdate();
            statement1.close();
            statement2.close();
            statement3.close();

            con.close();
            
        } catch (SQLException e) {
            System.out.println("Error");
            e.printStackTrace();
            return -1;
        }
        return id;
    }
}
